/*
 * Initialises the Phosphorus Five installation, by allowing the user to
 * set his root root password, and optionally supply a manual server salt.
 *
 * If the server needs to be setup, this file will return boolean _"true"_.
 * This file is evaluated from the __[p5.web.load-ui]__ event from the Desktop
 * module.
 */





/*
 * Creating main content container.
 */
create-container-widget:desktop-main-container
  class:container





/*
 * Checking if we should create server salt, or ask for root password.
 */
if
  p5.auth._has-server-salt
  not
  or
    p5.auth._root-password-is-null

  /*
   * Including Micro CSS files.
   */
  micro.css.include

  /*
   * No server salt, asking user to provide one.
   */
  create-widget
    parent:desktop-main-container
    widgets
      div
        class:row air-top
        widgets
          div
            class:col-100
            widgets

              /*
               * First some description.
               */
              h1
                innerValue:Initialize server
              p:root-description
                innerValue:@"Before you start using Phosphorus Five, you'll need to provide a root password, and
PGP encryption details, such that we can encrypt your password file. Make sure you remember your password, since it's impossible to retrieve it later.
This process will setup your <em>'root'</em> account, which you can use to administrate your system. Its username is <code>root</code>.
If you have an existing PGP keypair, you can use this instead of creating a new key. If you want to use an existing PGP key, you must
make sure the <code>gpg-server-keypair-password</code> setting in your web.config contains its AES password, such that we're able to release
it and decrypt the key."

          div
            class:col-50
            widgets

              /*
               * Select widget in case user has an existing PGP keypair in his GnuPG database.
               */
              select:gnu-pg-key
                class:fill
                onchange

                  /*
                   * Checking value of option selected, and if it's "_default", it's a "no selection".
                   */
                  get-widget-property:gnu-pg-key
                    value
                  if:x:/-/*/*?value
                    !=:_default

                    /*
                     * Enabling textboxes that allows user to create new key.
                     */
                    delete-widget-property:full-name
                      disabled
                    delete-widget-property:email-address
                      disabled
                    p5.crypto.pgp-keys.get-details:x:/@get-widget-property/*/*?value
                    split:x:/-/*/*/user-ids/0?value
                      =:<
                      =:>
                    set-widget-property:full-name
                      disabled
                      value:x:/@split/0?name
                    set-widget-property:email-address
                      disabled
                      value:x:/@split/1?name

                  else

                    /*
                     * Disabling textboxes that allows user to create new key.
                     */
                    delete-widget-property:full-name
                      disabled
                      value:
                    delete-widget-property:email-address
                      disabled
                      value:

                oninit

                  /*
                   * Listing allprivate keys and creating one option element foreach.
                   */
                  p5.crypto.pgp-keys.private.list
                  p5.crypto.pgp-keys.get-details:x:/-/*?name
                  for-each:x:/-/*
                    p5.html.html-encode:x:/@_dp/#/*/user-ids/0?value
                    create-widget
                      parent:x:/../*/_event?value
                      element:option
                      innerValue:x:/@p5.html.html-encode?value
                      value:x:/@_dp/#?name

                widgets
                  option
                    innerValue:Use existing PGP keypair ...
                    value:_default

              /*
               * Then user's name, which is needed to have an "identity" to create a PGP keypair.
               */
              input:full-name
                type:text
                class:fill
                placeholder:Your name ...
                onkeydown:@"if (event.keyCode == 13) {p5.$('setup-save-btn').raise('onclick');return false;}"
                oninit

                  /*
                   * Setting initial focus to textbox.
                   */
                  micro.page.set-focus:x:/../*/_event?value

              /*
               * Then user's email address, which is needed to have an "identity" to create a PGP keypair.
               */
              input:email-address
                type:text
                class:fill
                placeholder:Your email address ...
                onkeydown:@"if (event.keyCode == 13) {p5.$('setup-save-btn').raise('onclick');return false;}"

              /*
               * Then our textbox widgets, asking user to provide a root password for his system.
               */
              input:root-password
                type:password
                placeholder:Root password ...
                autocomplete:new-password
                class:fill
                onkeydown:@"if (event.keyCode == 13) {p5.$('setup-save-btn').raise('onclick');return false;}"

              input:root-password-repeat
                type:password
                placeholder:Repeat password ...
                autocomplete:new-password
                class:fill
                onkeydown:@"if (event.keyCode == 13) {p5.$('setup-save-btn').raise('onclick');return false;}"

          div
            class:col-50
            widgets

              /*
               * Then select panel for allowing user to change settings for how he sets up his server.
               */
              div
                class:select-panel
                widgets
                  label
                    title:Will submit your public PGP key to your configured PGP server. Notice, only use this in production for actual production keys, to avoid cluttering your key server with garbage keys.
                    widgets
                      input:desktop-install-submit-key
                        type:checkbox
                      span
                        innerValue:Submit key
                  label
                    title:Check this checkbox if you want to see the password as you are typing it.
                    widgets
                      input
                        type:checkbox
                        onchange

                          /*
                           * Checking property of checkbox, to figure out if we should show or hide password.
                           */
                          get-widget-property:x:/../*/_event?value
                            checked
                          if:x:/@get-widget-property/*/*

                            /*
                             * Changing password textbox from password to text, and hiding repeat textbox.
                             */
                            set-widget-property:root-password
                              type:text
                            set-widget-property:root-password-repeat
                              type:text

                          else

                            /*
                             * Changing password textbox from password to text, and hiding repeat textbox.
                             */
                            set-widget-property:root-password
                              type:password
                            set-widget-property:root-password-repeat
                              type:password

                          /*
                           * Setting focus to name textbox.
                           */
                          micro.page.set-focus:full-name
                      span
                        innerValue:Show pwd

                  label
                    title:Check this checkbox if you want to provide a manual salt, to increase the entropy of your server's cryptography functions.
                    widgets
                      input
                        type:checkbox
                        onchange

                          /*
                           * Toggling "server salt" to allow user to manually supply one himself.
                           */
                          get-widget-property:server-salt
                            class
                          if:x:/@get-widget-property/*/*?value
                            ~:hide

                            /*
                             * Displaying server salt.
                             */
                            micro.css.delete:server-salt
                              class:hide
                            micro.page.set-focus:server-salt

                          else

                            /*
                             * Hiding server salt.
                             */
                            micro.css.add:server-salt
                              class:hide
                            micro.page.set-focus:full-name

                            /*
                             * Checking if value of server salt is empty, at which time we create a new
                             * random one.
                             */
                            get-widget-property:server-salt
                              value
                            if:x:/@get-widget-property/*/*?value
                              =:

                              /*
                               * Creating a new random salt, since user deleted the existing one.
                               */
                              p5.crypto.rng.create-bytes
                                resolution:64
                                hex:true
                              set-widget-property:server-salt
                                value:x:/@p5.crypto.rng.create-bytes?value
                      span
                        innerValue:Manual salt

              /*
               * Then our textarea, which actually allows the user to type in a salt.
               */
              literal:server-salt
                element:textarea
                placeholder:Provide a random server salt ...
                class:fill hide
                oninit

                  /*
                   * Filling it with some default random bytes.
                   */
                  p5.crypto.rng.create-bytes
                    resolution:64
                    hex:true
                  set-widget-property:x:/../*/_event?value
                    value:x:/@p5.crypto.rng.create-bytes?value


          div
            class:col-100
            widgets

              /*
               * Submit strip at the bottom.
               */
              div
                class:strip right
                widgets
                  button
                    innerValue:Help
                    title:Displays a help window
                    onclick

                      /*
                       * Creating a modal window displaying information to the user.
                       */
                      create-widgets
                        micro.widgets.modal:modal-help
                          widgets
                            h3
                              innerValue:Help
                            p
                              innerValue:@"The most important thing for you here, is to create a <strong>unique password</strong>.
Contrary to other services that makes you create your passwords as 8 random characters often, Phosphorus Five requires you to by default
use at least 25 different characters. This however allows you to use entire sentences as passwords. As you do, you should strive for coming
up with a sentence that is unique to you, that you can easily remember, and that you <strong>have never ever written on the internet any other
places in your life!</strong> Examples of good passwords can be found below, however do not use any of these, they are merely examples."
                            ul
                              widgets
                                li
                                  innerValue:Rubbadub doodie woodie, this da man, the King of Reaggie
                                li
                                  innerValue:Howdy mate, this is la8pv calling from Down Town Central LA
                                li
                                  innerValue:I don't know 'bout u guys, but I'm in for some $$$
                            p
                              innerValue:@"The point is to create a sentence that has never been constructed before, preferably with some dialect
words, that are unique for you - Yet still making it easy for you to remember! For then to use this as your password. This results in a much
stronger password than 8 random characters, while still making your password easily remembered. Try to add some words in your dialect and/or
native tongue, preferably the entire sentence if you can. However, the idea is that you create something so easily remember by you, that you don't
need to write it down, yet still are able to remember it. If you are interested in the theory behind this, you can 
<a target=""_blank"" href=""https://gaiasoul.com/2018/06/10/password-entropy/"">read more about it here</a>."
                            p
                              innerValue:@"In addition, this process will also create a PGP keypair, and use that to encrypt your password file,
further eliminating an adversary's ability to compromise your system. This is why we'll need your email address and your name, since we use this
information as the <em>'identity'</em> while creating that PGP key. If you're super paranoid, you can also provide a manual <em>'salt'</em>,
which will be used when creating your PGP key, and doing other things in Phosphorus Five, that requires randomness, and/or salted hashed values.
This further eliminates an adversary's ability to break into your system by performing computational based <em>'predictions'</em> of your system."
                            div
                              class:right
                              widgets
                                button
                                  innerValue:I get it!
                                  onclick
                                    delete-widget:modal-help

                  button:setup-save-btn
                    innerValue:Save
                    title:Saves your settings
                    onclick

                      /*
                       * Creating a cover widget and invoking worker event.
                       */
                      create-widgets
                        micro.widgets.cover:init-cover
                          message:Please wait while we initialize your server ...
                      p5.web.send-javascript:@"p5.$('setup-save-btn').raise('.onclick')"

                    .onclick

                      /*
                       * Deleting cover widget.
                       */
                      delete-widget:init-cover

                      /*
                       * Retrieving server salt, and setting it.
                       */
                      get-widget-property:server-salt
                        value
                      if:x:/@get-widget-property/*/*?value
                        =:

                        /*
                         * No salt, cannot proceed ...
                         */
                        micro.windows.info:Please provide a server salt
                          class:micro-windows-info warning
                        return

                      /*
                       * Retrieving password(s), making sure they're not empty, and that they match.
                       */
                      get-widget-property:root-password
                        value
                      get-widget-property:root-password-repeat
                        value
                      if:x:/../*/get-widget-property/*/root-password/*?value
                        =:

                        /*
                         * Password were not given.
                         */
                        micro.windows.info:Please provide a password twice
                          class:micro-windows-info warning
                        micro.page.set-focus:root-password
                        return

                      if:x:/../*/get-widget-property/*/root-password/*?value
                        !=:x:/../*/get-widget-property/*/root-password-repeat/*?value

                        /*
                         * Password did mot match.
                         */
                        micro.windows.info:Passwords did not match
                          class:micro-windows-info warning
                        return

                      /*
                       * Verifying password meets password regime's restrictions.
                       */
                      p5.auth.is-good-password:x:/../*/get-widget-property/*/root-password/*?value
                      if:x:/@p5.auth.is-good-password?value
                        !=:bool:true

                        /*
                         * Not an accepted password.
                         */
                        micro.windows.info:Password not accepted, rules are '{0}'
                          :x:/@p5.auth.is-good-password?value
                          class:micro-windows-info warning
                        return

                      /*
                       * Setting salt.
                       */
                      if
                        p5.auth._has-server-salt
                        not
                        p5.auth._set-server-salt:x:/../*/get-widget-property/*/server-salt/*?value

                      /*
                       * Verifying that either select GnuPG key has an actual value, or that user
                       * has given us an email address, and/or some sort of identity to create a new
                       * PGP keypair.
                       */
                      get-widget-property:gnu-pg-key
                        value
                      if:x:/-/*/*?value
                        =:_default

                        /*
                         * User has not selected an existing keypair he wants to use.
                         *
                         * Creating a new keypair, and associating the PGP key with our server.
                         *
                         * Notice, this might take some time.
                         */
                        get-widget-property:full-name
                          value
                        get-widget-property:email-address
                          value

                        /*
                         * Sanity checking idenity for PGP key.
                         */
                        if:x:/./*/get-widget-property/*/full-name/*?value
                          =:
                          or:x:/././*/get-widget-property/*/email-address/*?value
                            =:

                          /*
                           * Missing identity information for our PGP key.
                           */
                          micro.windows.info:Type in a valid email address and name please.
                            class:micro-windows-info warning
                          micro.page.set-focus:full-name
                          return

                        /*
                         * Creating our PGP key, using AES password from web.config.
                         */
                        p5.config.get:gpg-server-keypair-password
                        p5.crypto.pgp-keys.create
                          password:x:/@p5.config.get/*?value
                          identity:{0} <{1}>
                            :x:/..if/*/get-widget-property/[0,1]/*/*?value
                            :x:/..if/*/get-widget-property/[1,2]/*/*?value
                        set:x:/@if/@if/@get-widget-property/*/*?value
                          src:x:/@p5.crypto.pgp-keys.create/*/fingerprint?value

                        /*
                         * Submits the public PGP key just created now to your server's configured PGP key server,
                         * if user wanted to do such a thing.
                         */
                        get-widget-property:desktop-install-submit-key
                          checked
                        if:x:/-/*/*

                          /*
                           * User wants to submit his key.
                           *
                           * Notice, in case key server is down, or some other error occurs, we wrap our attempt
                           * in a try/catch block.
                           */
                          try
                            eval-x:x:/+/*
                            micro.pgp.submit-public-key
                              fingerprint:x:/@p5.crypto.pgp-keys.create/*/fingerprint?value
                          catch

                            /*
                             * Making sure we display a modal widget warning use that we couldn't submit key to key server.
                             * Also making sure it becomes the TOP MOST modal widget.
                             */
                            desktop.evaluate.on-next-pageload
                              lambda
                                create-widgets
                                  micro.widgets.modal:submit-pgp-key-modal-warning
                                    widgets
                                      h3
                                        innerValue:Couldn't submit your PGP key to key server
                                      p
                                        innerValue:@"For some reasons, when we tried to submit your public PGP key to the specified
key server, this operation was not successful. You might want to manually try later, since the server might be temporarily down or something.
If you want to try, you can use the <strong>[micro.pgp.submit-public-key]</strong> Active Event. See the documentation for this event for details."
                                      div
                                        class:right
                                        widgets
                                          button
                                            innerValue:OK
                                            onclick

                                              /*
                                               * Deleting modal window.
                                               */
                                              delete-widget:submit-pgp-key-modal-warning

                      /*
                       * Setting server's GnuPG key's fingerprint.
                       */
                      if
                        p5.auth._has-server-pgp-key
                        not
                        p5.auth._set-server-pgp-key:x:/../*/get-widget-property/*/gnu-pg-key/*?value

                      /*
                       * Setting password, making sure we wrap it in a try/catch block to provide friendly feedback
                       * in case process was unsuccessful.
                       */
                      try
                        p5.auth._set-root-password
                          password:x:/../*/get-widget-property/*/root-password/*?value
                      catch

                        /*
                         * Retrieving friendly information string, hopefully giving user some feedback about the passwords
                         * rules his installation.
                         */
                        p5.config.get:p5.auth.password-rules-info
                        eval-x:x:/+/*/*/*/p/*/innerValue
                        create-widgets
                          micro.widgets.modal:p5-password-not-accepted-modal
                            widgets
                              h3
                                innerValue:Password not accepted
                              p
                                innerValue:x:/@p5.config.get/*?value
                              div
                                class:right
                                widgets
                                  button
                                    innerValue:OK
                                    oninit

                                      /*
                                       * Setting initial focus to "OK" button.
                                       */
                                      micro.page.set-focus:x:/../*/_event?value

                                    onclick

                                      /*
                                       * Deleting modal widget and settingfocus to the first password textbox.
                                       */
                                      delete-widget:p5-password-not-accepted-modal
                                      micro.page.set-focus:root-password

                        /*
                         * Returning early, to avoid evaluation of the rest of our lambda.
                         */
                        return

                      /*
                       * Logging in user such thathe doesn't have to login after we refresh page.
                       */
                      login
                        username:root
                        password:x:/../*/get-widget-property/*/root-password/*?value
                        persist:false

                      /*
                       * Reloading URL for simplicity, since we're now done with setting up the server.
                       */
                      p5.web.reload-location

  /*
   * Returning true to caller, to signal that server is in setup/initialize phase.
   */
  return:bool:true





/*
 * Returning false to caller, to signal that the server salt and root password has already been setup.
 */
return:bool:false
