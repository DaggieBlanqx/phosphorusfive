/*
 * Creates the __[p5.web.load-ui]__ Active Event.
 */

/*
 * This event is the main URL resolver for Phosphorus Five, and will according to the
 * URL the client requests, load some module, and pass on control of the request to that module's
 * _"launch.hl"_ file.
 *
 * __Notice__ - This event will invoke all Active Events named __[desktop.plugins.pre.xxx]__
 * before loading any modules, and all Active Events named __[desktop.plugins.post.xxx]__ after
 * having loaded any module. This allows you to create global plugins, which are invoked on
 * every single pageload, on every single module. This event will also force the user to initialise
 * the server, if the server has not already been initialised, by asking him for a root password,
 * and optionally supply a manual server salt.
 */
create-event:p5.web.load-ui

  /*
   * Sanity checking invocation.
   */
  micro.lambda.contract.min:x:/..
    url:string

  /*
   * First we must check if server has been setup, with a root password, 
   * and a server salt - And if not, we do so.
   */
  if
    p5.auth._has-server-salt
    not
    or
      p5.auth._root-password-is-null

    /*
     * No server salt, or no root password, hence the server needs to be initialized with a server salt, 
     * and a root password, before we can proceed.
     */
    micro.evaluate.file:@DESKTOP/initialize/initialize-server.hl

  else

    /*
     * Setting default title of page.
     */
    p5.config.get:p5.desktop.default-title
    p5.web.page.set-title:x:/@p5.config.get/*?value

    /*
     * Making sure initial scale of viewport is set correctly.
     */
    p5.web.page.add-meta-tag:meta
      name:viewport
      content:@"width=device-width, initial-scale=1.0"

    /*
     * Loading "pre" plugins, making sure we pass in [url] to all plugin events.
     */
    vocabulary:~desktop.plugins.pre.
    for-each:x:/@vocabulary/*?value
      eval-x:x:/+/*
      eval:x:/@_dp?value
        url:x:/../*/url?value

    /*
     * Figuring out URL entities.
     */
    micro.url.get-entities
    if:x:/@micro.url.get-entities/*?count
      =:int:0

      /*
       * Root URL was requested, loading the default app configured
       * in web.config.
       */
      p5.config.get:p5.core.default-app
      if:x:/@p5.config.get/*?value
        micro.evaluate.file:x:/@p5.config.get/*?value
      else
        throw:No default 'p5.core.default-app' section found in your web.config file.

    else

      /*
       * A specific application was requested, hence evaluating it's "launch.hl" file.
       *
       * Notice, to create some basic URL rewriting support, for all apps, we only use the first part of the URL
       * when determining which app to load. This allows any app to create sub URLs, with its own folders, etc, and
       * then do its own internal mapping, by using the URL itself, which is passed in as [url] into the app's
       * "launch.hl" file.
       *
       * For instance, to load some sub folder in Micro, the URL could be "/micro/foo/bar", etc ...
       * However, determining the URL, and doing the actual resolving, is up to the specific module itself, 
       * and not done by this startup file.
       *
       * Checking if app exists, and if not, returning some simple 404 Not found.
       */
      if
        fetch:x:/0/0?value
          file-exists:/modules/{0}/launch.hl
            :x:/@micro.url.get-entities/0?name
        not

        /*
         * Non-existing URL.
         */
        p5.web.response.set-status-code:404
        p5.web.echo:Oops 404, the place where URLs go to die!
        return

      /*
       * Checking if user has access to module.
       *
       * Defaulting access to "false".
       */
      p5.web.get-relative-location-url
      trim:x:/@p5.web.get-relative-location-url?value
        chars:/
      if
        p5.auth.has-access:bool:false
          filter:p5.module
          path:/modules/{0}/
            :x:/@trim?value
        not

        /*
         * User doesn't have access to this module.
         */
        p5.web.response.set-status-code:403
        micro.css.include
        desktop.authentication.login
        return

      /*
       * Loading the file, and evaluating it.
       */
      eval-x:x:/+/*/url
      micro.evaluate.file:/modules/{0}/launch.hl
        :x:/@micro.url.get-entities/0?name
        url:x:/../*/url?value

    /*
     * Loading "post" plugins, making sure we pass in [url] to all plugin events.
     */
    vocabulary:~desktop.plugins.post.
    for-each:x:/@vocabulary/*?value
      eval-x:x:/+/*
      eval:x:/@_dp?value
        url:x:/../*/url?value

    /*
     * Checking if license is valid.
     */
    desktop.license.check
